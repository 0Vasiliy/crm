import{P as v,g as d,y as m,x as c,z as o,D as y,B as u,C as f,A as p}from"./index-BImh0Udg.js";const A=v("utilities",()=>{const a=d([]),n=d(!1),r=d(null);return{utilities:a,loading:n,error:r,fetchUtilities:async()=>{n.value=!0,r.value=null;try{const e=await m(c(o,"utilities"));a.value=e.docs.map(t=>{const i=t.data();return{id:t.id,name:i.name||"",buildingId:i.buildingId||"",unit:i.unit||"",rate:i.rate||0,status:i.status||"active",createdAt:i.createdAt||new Date().toISOString()}}),console.log("Loaded utilities:",a.value)}catch(e){throw r.value=e.message,console.error("Error loading utilities:",e),e}finally{n.value=!1}},addUtility:async e=>{try{const t={name:e.name.trim(),buildingId:e.buildingId,unit:e.unit.trim(),rate:parseFloat(e.rate),status:e.status||"active",createdAt:e.createdAt||new Date().toISOString()},s={id:(await y(c(o,"utilities"),t)).id,...t};return a.value.push(s),console.log("Added new utility:",s),s}catch(t){throw r.value=t.message,console.error("Error adding utility:",t),t}},updateUtility:async(e,t)=>{try{const i={name:t.name.trim(),buildingId:t.buildingId,unit:t.unit.trim(),rate:parseFloat(t.rate),status:t.status,createdAt:t.createdAt,updatedAt:new Date().toISOString()},s=u(o,"utilities",e);await f(s,i);const l=a.value.findIndex(g=>g.id===e);l!==-1&&(a.value[l]={...a.value[l],...i}),console.log("Updated utility:",{id:e,...i})}catch(i){throw r.value=i.message,console.error("Error updating utility:",i),i}},deleteUtility:async e=>{try{await p(u(o,"utilities",e)),a.value=a.value.filter(t=>t.id!==e),console.log("Deleted utility:",e)}catch(t){throw r.value=t.message,console.error("Error deleting utility:",t),t}}}});export{A as u};
