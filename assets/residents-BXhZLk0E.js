import{P as p,g as c,x as u,z as a,R as f,U as w,y,D as v,B as h,C as g,A as S}from"./index-94aisbhc.js";const q=p("residents",()=>{const n=c([]),d=c(!1),i=c(null);return{residents:n,loading:d,error:i,fetchResidents:async(s={})=>{d.value=!0,i.value=null;try{console.log("Загрузка жильцов с фильтрами:",s);const e=u(a,"residents");let t=f(e);s.apartmentId&&(t=f(t,w("apartmentId","==",s.apartmentId)));const r=await y(t),o=[];return r.forEach(l=>{const R={id:l.id,...l.data()};o.push(R)}),console.log("Загружено жильцов:",o.length),n.value=o,o}catch(e){throw console.error("Ошибка при загрузке жильцов:",e),e}finally{d.value=!1}},addResident:async s=>{try{const e=u(a,"residents"),t=await v(e,{...s,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()}),r={id:t.id,...s};return n.value.push(r),t.id}catch(e){throw console.error("Ошибка при добавлении жильца:",e),e}},updateResident:async(s,e)=>{try{const t=h(a,"residents",s);await g(t,{...e,updatedAt:new Date().toISOString()});const r=n.value.findIndex(o=>o.id===s);r!==-1&&(n.value[r]={...n.value[r],...e})}catch(t){throw console.error("Ошибка при обновлении жильца:",t),t}},deleteResident:async s=>{try{const e=h(a,"residents",s);await S(e),n.value=n.value.filter(t=>t.id!==s)}catch(e){throw console.error("Ошибка при удалении жильца:",e),e}}}});export{q as u};
